// Generated by delombok at Wed Aug 05 13:49:19 CEST 2015
package pl.touk.sputnik.review.filter;

import org.apache.commons.lang3.StringUtils;
import org.jetbrains.annotations.NotNull;
import pl.touk.sputnik.review.ReviewFile;
import java.util.ArrayList;
import java.util.List;

public class FileExtensionFilter implements FileFilter {
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(FileExtensionFilter.class);
    private final List<String> allowedExtensions;

    @NotNull
    public List<ReviewFile> filter(@NotNull List<ReviewFile> files) {
        log.info("Filtering out review files with allowed extensions {}", allowedExtensions);
        List<ReviewFile> filtered = new ArrayList<>();
        for (ReviewFile file : files) {
            String extension = StringUtils.substringAfterLast(file.getReviewFilename(), ".");
            if (allowedExtensions.contains(extension)) {
                filtered.add(file);
            } else {
                log.info("File {} was filtered out due to not allowed extension {}", file.getReviewFilename(), extension);
            }
        }
        log.info("Total {} of {} files had allowed extensions {}", filtered.size(), files.size(), allowedExtensions);
        return filtered;
    }

    @java.beans.ConstructorProperties({"allowedExtensions"})
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public FileExtensionFilter(final List<String> allowedExtensions) {
        this.allowedExtensions = allowedExtensions;
    }
}