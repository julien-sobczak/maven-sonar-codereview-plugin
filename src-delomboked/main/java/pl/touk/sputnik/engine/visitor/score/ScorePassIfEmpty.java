// Generated by delombok at Wed Aug 05 13:49:19 CEST 2015
package pl.touk.sputnik.engine.visitor.score;

import org.jetbrains.annotations.NotNull;
import pl.touk.sputnik.engine.visitor.AfterReviewVisitor;
import pl.touk.sputnik.review.Review;
import java.util.Map;

public class ScorePassIfEmpty implements AfterReviewVisitor {
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(ScorePassIfEmpty.class);
    private final Map<String, Short> passingScore;
    private final Map<String, Short> failingScore;

    @Override
    public void afterReview(@NotNull Review review) {
        if (review.getTotalViolationCount() == 0) {
            log.info("Adding passing score {} for no violation(s) found", passingScore);
            review.setScores(passingScore);
            return;
        }
        log.info("Adding failing score {} for {} violations found", failingScore, review.getTotalViolationCount());
        review.setScores(failingScore);
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Map<String, Short> getPassingScore() {
        return this.passingScore;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Map<String, Short> getFailingScore() {
        return this.failingScore;
    }

    @java.beans.ConstructorProperties({"passingScore", "failingScore"})
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public ScorePassIfEmpty(final Map<String, Short> passingScore, final Map<String, Short> failingScore) {
        this.passingScore = passingScore;
        this.failingScore = failingScore;
    }
}