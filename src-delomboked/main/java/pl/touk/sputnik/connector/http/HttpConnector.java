// Generated by delombok at Wed Aug 05 13:49:19 CEST 2015
package pl.touk.sputnik.connector.http;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpHost;
import org.apache.http.NameValuePair;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.util.EntityUtils;
import org.jetbrains.annotations.NotNull;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

public class HttpConnector {
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(HttpConnector.class);
    private static int REQUEST_COUNTER = 0;
    private CloseableHttpClient httpClient;
    private HttpClientContext httpClientContext;
    private String contextPath = StringUtils.EMPTY;

    @NotNull
    public URI buildUri(String path, NameValuePair... parameters) throws URISyntaxException {
        HttpHost targetHost = httpClientContext.getTargetHost();
        return new URIBuilder().setHost(targetHost.getHostName()).setPort(targetHost.getPort()).setScheme(targetHost.getSchemeName()).setPath(contextPath + path).setParameters(parameters).build();
    }

    @NotNull
    public CloseableHttpResponse logAndExecute(@NotNull HttpRequestBase request) throws IOException {
        log.info("Request  {}: {} to {}", ++REQUEST_COUNTER, request.getMethod(), request.getURI().toString());
        CloseableHttpResponse httpResponse = httpClient.execute(request, httpClientContext);
        log.info("Response {}: {}", REQUEST_COUNTER, httpResponse.getStatusLine().toString());
        return httpResponse;
    }

    @NotNull
    public String consumeAndLogEntity(@NotNull CloseableHttpResponse response) throws IOException {
        if (response.getEntity() == null) {
            log.debug("Entity {}: no entity", REQUEST_COUNTER);
            return StringUtils.EMPTY;
        }
        String content = EntityUtils.toString(response.getEntity());
        log.info("Entity {}: {}", REQUEST_COUNTER, content);
        return content;
    }

    @java.beans.ConstructorProperties({"httpClient", "httpClientContext", "contextPath"})
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public HttpConnector(final CloseableHttpClient httpClient, final HttpClientContext httpClientContext, final String contextPath) {
        this.httpClient = httpClient;
        this.httpClientContext = httpClientContext;
        this.contextPath = contextPath;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public CloseableHttpClient getHttpClient() {
        return this.httpClient;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public HttpClientContext getHttpClientContext() {
        return this.httpClientContext;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getContextPath() {
        return this.contextPath;
    }
}